/* * This file is part of the ImageManager package. * * @author (c) Tim Shelburne <tim@dontlookstudios.com> * * For the full copyright and license information, please view the LICENSE * file that was distributed with this source code. */package dls.imagemanager.loaders {		import dls.imagemanager.IImage;	import dls.imagemanager.loaders.IImageLoader;		import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.Loader;	import flash.events.Event;	import flash.net.URLRequest;		import org.osflash.signals.natives.NativeSignal;		/*	 * A generalized class to handle loading images.	 */	public class ImageLoader implements IImageLoader {				/*=========================================================*		 * PROPERTIES		 *=========================================================*/		 		private var _pendingImages:Vector.<IImage> = new <IImage>[];		private var _nocache:String = "?nocache=" + new Date().valueOf().toString();				/*=========================================================*		 * FUNCTIONS		 *=========================================================*/				public function ImageLoader() {					}				public function canHandle(options:Object):Boolean {			return true;		}				public function load(image:IImage, options:Object):void {			_pendingImages.push(image);						var url:String = image.url;						if (!options.hasOwnProperty("cache") || !options.cache) {				url += _nocache;			}						var loader:Loader = new Loader();			loader.name = image.url;			new NativeSignal(loader.contentLoaderInfo, Event.COMPLETE, Event).addOnce(imageLoaded);			loader.load(new URLRequest(url));		}				private function imageLoaded(e:Event):void {			var bitmapData:BitmapData = new BitmapData(e.target.width, e.target.height, true, 0x00000000);			bitmapData.draw(e.target.content);						var bitmap:Bitmap = new Bitmap();			bitmap.bitmapData = bitmapData.clone();			bitmap.smoothing = true;						for each (var image:IImage in _pendingImages) {				if (image.url == e.target.loader.name) {					image.bitmap = bitmap;					_pendingImages.splice(_pendingImages.indexOf(image), 1);				}			}		}	}}